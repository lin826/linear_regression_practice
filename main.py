# Reference:
# http://aimotion.blogspot.tw/2011/10/machine-learning-with-python-linear.html
# https://www.tutorialspoint.com/python/python_command_line_arguments.htm

import sys
from approach import *

APPR = Test_approach
settings = {'map_size':1081,'dim':2,'iter':10,'eta':0.005,
    'basis_size':225,'sigma':30,
    'x_train':'data/X_train.csv','t_train':'data/T_train.csv'}

def main_opt(opt, data):

    if(opt == 'x_train'):
        settings[opt] = data
    elif(opt == 't_train'):
        settings[opt] = data
    elif(opt == 'approach'):
        set_approach(data)
    elif(opt == 'eta'):
        settings[opt] = float(data)
    else:
        settings[opt] = int(data)


def set_approach(data):
    if(data == 'ML'):
        APPR = ML_approach
    elif(data == 'MAP'):
        APPR = MAP_approach
    elif(data == 'Baysian'):
        APPR = Baysian_approach
    elif(data == 'Test'):
        APPR = Test_approach
    else:
        print('No approach:',data)

if __name__ == "__main__":
    arg = sys.argv[1:]
    for i in range(len(arg)-1):
        if(arg[i].startswith('--')):
            opt = arg[i][2:]
            main_opt(opt,arg[i+1])
    model_setting(settings)
    APPR()



#

#
#
# def train_weights(algorithm,it, y, weights, alpha, iterations):
#     weights = algorithm(it, y, weights, alpha, iterations)
#     print("Finish weights: ",weights)
#     return weights
#
# def Maximum_likelihood_approach(it, y, weights, alpha, iterations):
#     # return weights
# 	return gradient_descent(it, y, weights, alpha, iterations)
#
#
# #Load the dataset
# X,y= set_X_Y(DATA_SIZE)
# #number of training samples
# m = y.size
# #Add a column of ones to X (interception data)
# it = ones(shape=(m, DIM))
# for i in range(DIM):
#     it[:, i] = X[:,i]
# #Initialize weights parameters
# weights = ones(shape=(num_basis, 1))
# # weights = numpy.array( [[  1.72961045e-02], [  8.50940819e-03], [  1.38207410e-02], [  4.84739541e-03], [  1.41171924e-02], [  7.65522341e-03], [  9.79902473e-03], [ -1.24153591e-03], [ -4.52611211e-03], [  3.32740703e-03], [  2.89879081e-02], [  2.86319053e-02], [  1.04141005e-02], [  3.75108523e-02], [  8.34040661e-02], [  1.26825965e-02], [ -6.93624856e-03], [ -8.84049385e-03], [ -4.27127223e-03], [ -1.28086086e-02], [ -1.43423752e-02], [ -2.64770794e-02], [  8.55561369e-02], [  3.89142721e-01], [  4.11620691e-02], [ -1.53338151e-02], [ -4.47723175e-03], [  1.89625300e-02], [ -1.45517131e-02], [  9.52254600e-02], [ -4.33282559e-03], [ -7.27529221e-03], [ -1.23222087e-02], [ -1.31075876e-02], [ -6.10186664e-02], [ -2.83878346e-02], [  2.21875970e-01], [  1.05976488e+00], [  7.05108775e-01], [  1.91784702e-01], [  6.22662936e-02], [  2.06278700e-02], [  1.18120903e-02], [ -1.20700474e-02], [  1.33937831e-01], [  8.17649257e-03], [  2.77118142e-02], [  2.94972226e-01], [  6.31141273e-01], [  6.16168335e-01], [  4.17636061e-01], [  5.69060905e-01], [  2.89770092e-01], [  1.41438701e-01], [  9.52127947e-02], [  7.69224835e-02], [  6.78514429e-02], [  2.43035019e-01], [  1.38381011e-01], [  1.78020749e+00], [ -4.80979487e-03], [  1.20795285e-01], [  3.72178357e-01], [  4.24652362e-01], [  2.54490239e-01], [  1.27203460e-01], [  9.31043171e-02], [  8.03496097e-02], [  8.48024631e-02], [  1.66131617e-01], [  2.62402372e-01], [  2.83696673e-01], [  1.00409232e+00], [  2.35460246e+00], [  5.00799596e+00], [  1.74433505e-04], [ -1.02939334e-02], [ -2.29099722e-02], [  3.21895911e-02], [  2.21554499e-01], [  2.29994748e-01], [  2.07704077e-01], [  3.75617571e-01], [  5.80752341e-01], [  1.00034178e+00], [  9.31397194e-01], [  9.06028512e-01], [  7.77747785e-01], [  7.56260501e-01], [  2.08672622e+00], [  3.27692604e-03], [ -7.05926251e-03], [ -1.65297839e-02], [  3.82691611e-02], [  1.05284436e+00], [  1.63426544e+00], [  1.11454641e+00], [  1.55556865e+00], [  2.70852569e+00], [  1.17671356e+00], [  2.27145808e+00], [  9.25951440e-01], [  1.12478858e+00], [  1.17201806e+00], [  1.39749288e+00], [  3.92263943e-03], [ -4.12259998e-03], [ -4.96197138e-02], [  2.29193119e-01], [  9.28859191e-01], [  1.39465351e+00], [  9.23107946e-01], [  1.14666333e+00], [  3.81389141e+00], [  4.07340800e+00], [  1.83319021e+00], [  1.64886248e+00], [  1.93058815e+00], [  2.55788161e+00], [  2.13821130e+00], [  1.63420565e-03], [ -2.50148643e-02], [  1.49018216e-02], [  5.70981065e-01], [  1.60748294e+00], [  9.97645042e-01], [  3.96361366e-01], [  3.76649658e-01], [  1.89993243e+00], [  3.77946407e+00], [  1.78616571e+00], [  3.12074583e+00], [  4.11618705e+00], [  3.07010111e+00], [  3.04918040e+00], [ -1.25320412e-02], [ -1.93254563e-02], [  1.51079504e-01], [  1.33236902e+00], [  2.06020275e+00], [  1.27713642e+00], [  1.37426818e-01], [  4.37504055e-01], [  1.13899130e+00], [  9.72980093e-01], [  7.64478502e-01], [  8.41739304e-01], [  2.00995569e+00], [  2.52875571e+00], [  3.94086476e+00], [ -2.31995483e-02], [  1.44325733e-01], [  7.96431277e-01], [  6.92759529e-01], [  9.10217287e-01], [  4.78953844e-01], [  5.76039595e-01], [  4.13309670e-01], [  3.49796947e-01], [  4.87184628e-01], [  2.14529232e+00], [  1.93220853e+00], [  1.58825621e+00], [  1.68249112e+00], [  3.64047439e+00], [  2.17479268e-01], [  6.54396712e-01], [  7.10748580e-02], [ -5.77178160e-02], [ -7.20782295e-02], [ -9.87855729e-02], [  1.55441202e+00], [  1.71401705e+00], [  9.62895873e-01], [  1.32295269e+00], [  2.40988159e+00], [  3.29789912e+00], [  2.13849989e+00], [  9.48074899e-01], [  1.27165205e+00], [  4.90625944e-02], [ -1.24621845e-02], [ -1.65297400e-02], [ -1.46212454e-02], [ -1.87324396e-02], [ -7.12619303e-02], [  4.08548353e-01], [  1.90384043e+00], [  2.26877880e+00], [  2.64737136e+00], [  2.19087481e+00], [  2.13147273e+00], [  2.89528830e+00], [  1.62318332e+00], [  1.15292993e+00], [ -1.37346020e-03], [ -1.02410704e-02], [ -2.16936819e-03], [ -9.04500801e-03], [ -1.20445794e-02], [ -2.33873282e-02], [ -5.31711828e-02], [ -9.48696977e-03], [  1.09111727e+00], [  1.53614373e+00], [  1.59912060e+00], [  2.00524957e+00], [  1.69936961e+00], [  1.46267403e+00], [  1.58868523e-01], [  1.37299251e-02], [  3.21360786e-03], [  1.22770171e-02], [  1.51825500e-02], [  1.18731920e-02], [  2.89541932e-03], [ -4.43146966e-03], [ -4.09518602e-02], [ -2.57034598e-02], [  3.51850452e-02], [ -8.40980876e-02], [ -1.87459268e-01], [ -9.98889525e-02], [  4.85400331e-02], [  1.76036753e-02]])
# # # mean square error:  [ 1393.85032669]
#
# set_Gausian(it, y, weights,MAP_SIZE)
# #compute and display initial cost
# evaluate_algorithm(it, y, weights)
#
# #Train and get weights/weights
# weights = train_weights(Maximum_likelihood_approach,it, y, weights, alpha, iterations)
#
# #compute and display final cost
# evaluate_algorithm(it, y, weights)
#
# #Show the 3D graph
# show_gragh(X,y,weights)
